#!/bin/bash

dir=`pwd`

verde="\033[1;32m"
vermelho="\033[1;31m"
amarelo="\033[1;33m"
limpar="\033[0m"


# =================================================================================
#						Flags
# =================================================================================
# Execução
FINALIZOU=FALSE         # Registra se o cálculo atual finalizou
QUIET=FALSE
VERBOSE=0
KEEP_TEMP=0
# Dependências
DEP_GFORTRAN=FALSE
DEP_XCRYSDEN=FALSE
DEP_XMAKEMOL=FALSE
DEP_XMGRACE=FALSE
DEP_ZENITY=FALSE
# =================================================================================

# Tornando as dependẽncias do script executável
chmod +x new_run.run



# =================================================================================
#						Função Verbose
# =================================================================================
#	Objetivo:			 -	Exibir logs detalhados no terminal se a flag verbose = True
#	Variavel
#		$1               -	Mensagem passada na chamada da função
#
log_verbose(){
    test $VERBOSE = TRUE && printf "$1\n"
}
# =================================================================================



# Verificação de argumentos passados na excecução do programa
while test -n "$1"
do
    case "$1" in
        -h | --help)
            echo -e "$MENSAGEM_AJUDA"
            exit 0
            ;;
        -v | --version)
            echo "$VERSAO"
            exit 0
            ;;
        -V | --verbose)
            VERBOSE=TRUE
            ;;
        -q | --quiet)
            QUIET=TRUE
            ;;
        -k | --keep-temp)
            KEEP_TEMP=TRUE
            ;;
        *)
            if test -n "$1"; then
                echo "$OPCAO_INVALIDA"
                exit 1
            fi
    esac
    # Opção $1 já tratada, deslocando parâmetros posicionais
    shift
done
# =================================================================================



# =================================================================================
#						Bandas Fermi 
# =================================================================================
#	Objetivo:			 -	Gera a estrutura de banda para o Nível de Fermi
#	Variavel
#
bandas_fermi(){
    
    # Pegar a Energia de Fermi
    E_FERMI=$(head -n 1 ${SystemLabel}.bands)

    # Pegar o Vetor de Alta Simetria X
    X=$(tail -n 1 ${SystemLabel}.bands | awk '{print $1}')
    
    # Pegar o Vetor de Alta Simetria Gamma
    GAMMA=$(tail -n 2 ${SystemLabel}.bands | head -n 1 | awk '{print $1}')  
    
    echo 
    echo "---------------------------------------"
    echo "               X:    $X"
    echo "           GAMMA:    $GAMMA"
    echo "Energia de Fermi: $E_FERMI"
    echo "---------------------------------------"

    # Criando o arquivo bandas-fermi.dat
    echo "$GAMMA        $E_FERMI" > bandas-fermi.dat
    echo "$X        $E_FERMI" >> bandas-fermi.dat
    
}
# =================================================================================


















# =================================================================================
#						Parse XML
# =================================================================================
#	Objetivo:			 -	Tratar o arquivo XML
#
SystemName=($(grep -oP '(?<=SystemName>)[^<]+' $dir/settings.xml))
SystemLabel=($(grep -oP '(?<=SystemLabel>)[^<]+' $dir/settings.xml))
# =================================================================================






# Vericar se o arquivo de configuração existe
if [ ! -f "$dir/settings.xml" ]; then
    echo -e "${vermelho}[ERRO]${limpar} O arquivo de configurações '${amarelo}settings.xml${limpar}' não existe."
    exit 1
else
    log_verbose "${verde}[ OK ]${limpar} Arquivo de configurações '${amarelo}settings.xml${limpar}' encontrado"
fi





# Verificando se há algum arquivo .out na pasta
if [ -f *.out ]; then
    arquivo_out=`ls *.out`;
else
    echo "Erro: Nenhum arquivo .out encontrado."
    exit 1
fi

# =================================================================================
#						Cálculo Completo
# =================================================================================
#	Objetivo:			 -	Verifica se o cálculo atual já foi finalizado
#
if tail $arquivo_out | grep -q -i 'Completed End' ; then
    FINALIZOU=TRUE
fi
# =================================================================================



# =================================================================================
#						-----
# =================================================================================
#	Objetivo:			 -	Realizar backup de todos os arquivos de saída
#


if [ $FINALIZOU = TRUE ]; then
    printf "\n==========$verde Cálculo finalizado$limpar ==========\n\n"

    data=$(date +%y-%m-%d_%H:%M) # Data e hora para o nome do backup
    # zip -q -9 ${data}.zip *      # Cria o zip 

    printf "$verde[ OK ]$limpar Backup $amarelo[$data.zip]$limpar criado.\n"


    # Mostrar o Constrained da Matriz de Densidade Eletrônica
    grep "constrained" *.out 


    # Gerar os arquivos de bandas no formato GNU
    # ./gnubands < $SystemLabel.BANDS > bandas.dat

    # TODO: Gerar banda-fermi.dat

    bandas_fermi


    # Iniciando novos cálculos se necessário
    printf "$verde Iniciando novos cálculos $limpar \n"
    # ./new_run.run
else
    printf "$vermelho[ERRO]$limpar Cálculo não finalizado\n"
fi
# =================================================================================